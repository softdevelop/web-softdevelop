<?php

/**
 * This is the model base class for the table "{{services}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Service".
 *
 * Columns in table "{{services}}" available as properties of the model,
 * followed by relations of table "{{services}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $alias
 * @property integer $category_id
 * @property string $description
 * @property string $content
 * @property string $image
 * @property string $price
 * @property string $special_price
 * @property integer $quantity
 * @property string $style
 * @property integer $priority
 * @property boolean $is_special
 * @property boolean $is_published
 * @property string $create_time
 * @property string $update_time
 *
 * @property ServiceCategories $category
 */
abstract class BaseService extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{services}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Service|Services', $n);
	}

	public static function representingColumn() {
		return 'alias';
	}

	public function rules() {
		return array(
			array('name, alias, category_id', 'required'),
			//array('image', 'file', 'types'=>'jpg, gif, png'),
			array('image', 'file','types'=>'jpg, gif, png', 'allowEmpty'=>true, 'on'=>'update'),
			array('category_id, quantity, priority', 'numerical', 'integerOnly'=>true),
			array('price, special_price', 'length', 'max'=>50),
			array('style', 'length', 'max'=>255),
			array('name, description, content, image, is_special, is_published, create_time, update_time', 'safe'),
			array('name, category_id, description, content, image, price, special_price, quantity, style, priority, is_special, is_published, create_time, update_time', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, alias, category_id, description, content, image, price, special_price, quantity, style, priority, is_special, is_published, create_time, update_time', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'category' => array(self::BELONGS_TO, 'ServiceCategory', 'category_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'alias' => Yii::t('app', 'Alias'),
			'category_id' => null,
			'description' => Yii::t('app', 'Description'),
			'content' => Yii::t('app', 'Content'),
			'image' => Yii::t('app', 'Image'),
			'price' => Yii::t('app', 'Price'),
			'special_price' => Yii::t('app', 'Special Price'),
			'quantity' => Yii::t('app', 'Quantity'),
			'style' => Yii::t('app', 'Style'),
			'priority' => Yii::t('app', 'Priority'),
			'is_special' => Yii::t('app', 'Is Special'),
			'is_published' => Yii::t('app', 'Is Published'),
			'create_time' => Yii::t('app', 'Create Time'),
			'update_time' => Yii::t('app', 'Update Time'),
			'category' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('alias', $this->alias, true);
		$criteria->compare('category_id', $this->category_id);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('content', $this->content, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('price', $this->price, true);
		$criteria->compare('special_price', $this->special_price, true);
		$criteria->compare('quantity', $this->quantity);
		$criteria->compare('style', $this->style, true);
		$criteria->compare('priority', $this->priority);
		$criteria->compare('is_special', $this->is_special);
		$criteria->compare('is_published', $this->is_published);
		$criteria->compare('create_time', $this->create_time, true);
		$criteria->compare('update_time', $this->update_time, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'sort'=>array(
				'defaultOrder'=>'priority ASC',
				'multiSort' =>true,
				'attributes' => array(
					'rating'=> array(
						'DESC' => 'create_time'
					)
				)
			),
		));
	}
	
	public function searchByCategory($category_id) {
		$criteria = new CDbCriteria;
		
		$criteria->with=array('categories');
        $criteria->together = true;
		
		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('alias', $this->alias, true);
		$criteria->compare('category_id', $this->category_id);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('content', $this->content, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('price', $this->price, true);
		$criteria->compare('special_price', $this->special_price, true);
		$criteria->compare('quantity', $this->quantity);
		$criteria->compare('style', $this->style, true);
		$criteria->compare('priority', $this->priority);
		$criteria->compare('is_special', $this->is_special);
		$criteria->compare('is_published', $this->is_published);
		$criteria->compare('create_time', $this->create_time, true);
		$criteria->compare('update_time', $this->update_time, true);
		
		$criteria->compare("'category'.'id'", $category_id);
		
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}